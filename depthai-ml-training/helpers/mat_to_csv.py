# Taken and edited from https://github.com/GotG/object_detection_demo_flow

"""
Converts image annotations in the PASCAL VOC XML format to a CSV format and writes to disk

Usage:
# Create train data:
python xml_to_csv.py -i [PATH_TO_IMAGES_FOLDER]/train -o [PATH_TO_ANNOTATIONS_FOLDER]/train_labels.csv

# Create test data:
python xml_to_csv.py -i [PATH_TO_IMAGES_FOLDER]/test -o [PATH_TO_ANNOTATIONS_FOLDER]/test_labels.csv
"""

import os
import glob
import pandas as pd
import argparse
import scipy.io as sio


def mat_to_csv(path):
    """Iterates through all .xml files (generated by labelImg) in a given directory and combines them in a single Pandas datagrame.

    Parameters:
    ----------
    path : {str}
        The path containing the .xml files
    Returns
    -------
    Pandas DataFrame
        The produced dataframe
    """
    classes_names = ["person"]
    mat_list = []
    for mat_file in glob.glob(path + "/*.mat"):
        img_filename = (mat_file.split("/")[3]).split('.mat')[0]
        bboxes = sio.loadmat(mat_file)['box_new']
        img_width = 1920
        img_height = 1080
        for bbox in bboxes:
            xmin = int(bbox[1])
            ymin = int(bbox[2])
            xmax = xmin + int(bbox[3])
            ymax = ymin + int(bbox[4])

            value = (
                img_filename,
                img_width,
                img_height,
                "person",
                xmin,
                ymin,
                xmax,
                ymax,
            )
            # commentare la riga 56 per avere una sola classe in label_map
            #classes_names.append("person")
            mat_list.append(value)
    column_name = [
        "filename",
        "width",
        "height",
        "class",
        "xmin",
        "ymin",
        "xmax",
        "ymax",
    ]
    mat_df = pd.DataFrame(mat_list, columns=column_name)
    return mat_df, list(classes_names)


def main():
    # Initiate argument parser
    parser = argparse.ArgumentParser(
        description="Sample TensorFlow XML-to-CSV converter"
    )
    parser.add_argument(
        "-i",
        "--inputDir",
        help="Path to the folder where the input .xml files are stored",
        type=str,
    )
    parser.add_argument(
        "-o", "--outputFile", help="Name of output .csv file (including path)", type=str
    )

    parser.add_argument(
        "-l",
        "--labelMapDir",
        help="Directory path to save label_map.pbtxt file is specified.",
        type=str,
        default="",
    )

    args = parser.parse_args()

    if args.inputDir is None:
        args.inputDir = os.getcwd()
    if args.outputFile is None:
        args.outputFile = args.inputDir + "/labels.csv"

    assert os.path.isdir(args.inputDir)
    os.makedirs(os.path.dirname(args.outputFile), exist_ok=True)
    mat_df, classes_names = mat_to_csv(args.inputDir)
    mat_df.to_csv(args.outputFile, index=None)
    print("Successfully converted mat to csv.")
    if args.labelMapDir:
        os.makedirs(args.labelMapDir, exist_ok=True)
        label_map_path = os.path.join(args.labelMapDir, "label_map.pbtxt")
        print("Generate `{}`".format(label_map_path))

        # Create the `label_map.pbtxt` file
        pbtxt_content = ""
        for i, class_name in enumerate(classes_names):
            pbtxt_content = (
                pbtxt_content
                + "item {{\n    id: {0}\n    name: '{1}'\n}}\n\n".format(
                    i + 1, class_name
                )
            )
        pbtxt_content = pbtxt_content.strip()
        with open(label_map_path, "w") as f:
            f.write(pbtxt_content)


if __name__ == "__main__":
    main()
